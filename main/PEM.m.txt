function [x, supps, hist, k] = PEM(X, SIGMA, m, options)
% Partial EM algorithm for NPMLE with unknown supports
% X: n×d observations, SIGMA: n×d noise covariance matrices (diagonal)

% -------- Initialization --------
[n, d] = size(X);
if m < n
    supps = X(randperm(n, m), :);
else
    supps = X;
end
stoptol = 1e-4; printyes = 0; maxiter = 100;
if exist('options', 'var')
    if isfield(options, 'supps_initial'), supps = options.supps_initial; end
    if isfield(options, 'stoptol'), stoptol = options.stoptol; end
    if isfield(options, 'printyes'), printyes = options.printyes; end
end

inv_Sigma = 1 ./ reshape(SIGMA, d, n)';   % inverse of diagonal Sigma
inv_SigmaX = inv_Sigma .* X;
options.init_opt = 1;

% -------- Main Loop --------
for k = 1:maxiter
    L = likelihood_matrix(X, supps, SIGMA);
    [obj, x, ~, ~, ~, ~, ~] = DualALM(L, options);
    fprintf('iter = %3d, log-likelihood = %5.8e\n', k, -obj(1));
    
    if k > 1 && abs(obj_old(1) - obj(1)) < stoptol
        break;
    end
    hist.obj(k) = -obj(1);

    % E-step: compute responsibilities
    pos_idx = (x > 0);
    xtmp = x(pos_idx);
    Ltmp = L(:, pos_idx);
    Lx = Ltmp * xtmp;
    gamma_hat = (Ltmp .* xtmp') ./ Lx;

    % M-step: update supports
    supps_update = (gamma_hat' * inv_SigmaX) ./ (gamma_hat' * inv_Sigma);
    supps(pos_idx, :) = supps_update;

    if sum(pos_idx) < m / 3
        L(:, pos_idx) = likelihood_matrix(X, supps_update, SIGMA);
    end
    obj_old = obj;
end
end
